From e5e64a038775d3c7bd8f412fe9d814c8dfe795eb Mon Sep 17 00:00:00 2001
From: "Min Hu (Connor)" <humin29@huawei.com>
Date: Fri, 11 Feb 2022 11:27:04 +0800
Subject: [PATCH 10/13] net/hns3: dump flow control info

This patch dumps flow control info such as flow control mode
for debug.

Signed-off-by: Min Hu (Connor) <humin29@huawei.com>
---
 drivers/net/hns3/hns3_ethdev.c      |   2 +-
 drivers/net/hns3/hns3_ethdev.h      |   2 +
 drivers/net/hns3/hns3_ethdev_dump.c | 103 ++++++++++++++++++++++++++++
 3 files changed, 106 insertions(+), 1 deletion(-)

diff --git a/drivers/net/hns3/hns3_ethdev.c b/drivers/net/hns3/hns3_ethdev.c
index a9394eeeff..cac6dd7755 100644
--- a/drivers/net/hns3/hns3_ethdev.c
+++ b/drivers/net/hns3/hns3_ethdev.c
@@ -5350,7 +5350,7 @@ hns3_get_current_fc_mode(struct rte_eth_dev *dev)
 	return hns3_get_autoneg_fc_mode(hw);
 }
 
-static int
+int
 hns3_flow_ctrl_get(struct rte_eth_dev *dev, struct rte_eth_fc_conf *fc_conf)
 {
 	struct hns3_hw *hw = HNS3_DEV_PRIVATE_TO_HW(dev->data->dev_private);
diff --git a/drivers/net/hns3/hns3_ethdev.h b/drivers/net/hns3/hns3_ethdev.h
index 412626c053..fd83bb7109 100644
--- a/drivers/net/hns3/hns3_ethdev.h
+++ b/drivers/net/hns3/hns3_ethdev.h
@@ -1030,6 +1030,8 @@ hns3_test_and_clear_bit(unsigned int nr, volatile uint64_t *addr)
 	return __atomic_fetch_and(addr, ~mask, __ATOMIC_RELAXED) & mask;
 }
 
+int
+hns3_flow_ctrl_get(struct rte_eth_dev *dev, struct rte_eth_fc_conf *fc_conf);
 uint32_t hns3_get_speed_capa(struct hns3_hw *hw);
 
 int hns3_buffer_alloc(struct hns3_hw *hw);
diff --git a/drivers/net/hns3/hns3_ethdev_dump.c b/drivers/net/hns3/hns3_ethdev_dump.c
index c0fc55b290..d9c1879f74 100644
--- a/drivers/net/hns3/hns3_ethdev_dump.c
+++ b/drivers/net/hns3/hns3_ethdev_dump.c
@@ -738,6 +738,108 @@ hns3_get_tm_conf_info(FILE *file, struct rte_eth_dev *dev)
 	hns3_get_tm_conf_queue_node_info(file, conf, dev->data->nb_tx_queues);
 }
 
+static void
+hns3_fc_mode_to_rxtx_pause(enum hns3_fc_mode fc_mode, bool *rx_pause,
+			   bool *tx_pause)
+{
+	switch (fc_mode) {
+	case HNS3_FC_NONE:
+		*tx_pause = false;
+		*rx_pause = false;
+		break;
+	case HNS3_FC_RX_PAUSE:
+		*rx_pause = true;
+		*tx_pause = false;
+		break;
+	case HNS3_FC_TX_PAUSE:
+		*rx_pause = false;
+		*tx_pause = true;
+		break;
+	case HNS3_FC_FULL:
+		*rx_pause = true;
+		*tx_pause = true;
+		break;
+	default:
+		*rx_pause = false;
+		*tx_pause = false;
+		break;
+	}
+}
+
+static bool
+hns3_is_link_fc_mode(struct hns3_adapter *hns)
+{
+	struct hns3_hw *hw = &hns->hw;
+	struct hns3_pf *pf = &hns->pf;
+
+	if (hw->current_fc_status == HNS3_FC_STATUS_PFC)
+		return false;
+
+	if (hw->num_tc > 1 && !pf->support_multi_tc_pause)
+		return false;
+
+	return true;
+}
+
+static void
+hns3_get_link_fc_info(FILE *file, struct rte_eth_dev *dev)
+{
+	struct hns3_adapter *hns = dev->data->dev_private;
+	struct hns3_hw *hw = &hns->hw;
+	struct rte_eth_fc_conf cur_fc_conf;
+	bool rx_pause1;
+	bool tx_pause1;
+	bool rx_pause2;
+	bool tx_pause2;
+	int ret;
+
+	if (!hns3_is_link_fc_mode(hns))
+		return;
+
+	ret = hns3_flow_ctrl_get(dev, &cur_fc_conf);
+	if (ret)  {
+		fprintf(file, "get device flow control info fail!\n");
+		return;
+	}
+
+	hns3_fc_mode_to_rxtx_pause(hw->requested_fc_mode,
+				   &rx_pause1, &tx_pause1);
+	hns3_fc_mode_to_rxtx_pause((enum hns3_fc_mode)cur_fc_conf.mode,
+				   &rx_pause2, &tx_pause2);
+
+	fprintf(file,
+		"\t  -- link_fc_info:\n"
+		"\t       Requested fc:\n"
+		"\t         Rx:	%s\n"
+		"\t         Tx:	%s\n"
+		"\t       Current fc:\n"
+		"\t         Rx:	%s\n"
+		"\t         Tx:	%s\n"
+		"\t       Autonegotiate: %s\n"
+		"\t       Pause time:	0x%x\n",
+		rx_pause1 ? "On" : "Off", tx_pause1 ? "On" : "Off",
+		rx_pause2 ? "On" : "Off", tx_pause2 ? "On" : "Off",
+		cur_fc_conf.autoneg == RTE_ETH_LINK_AUTONEG ? "On" : "Off",
+		cur_fc_conf.pause_time);
+}
+
+static void
+hns3_get_flow_ctrl_info(FILE *file, struct rte_eth_dev *dev)
+{
+	struct hns3_adapter *hns = dev->data->dev_private;
+	struct hns3_hw *hw = &hns->hw;
+
+	fprintf(file, "  - Flow Ctrl Info:\n");
+	fprintf(file,
+		"\t  -- fc_common_info:\n"
+		"\t       current_fc_status=%u\n"
+		"\t       requested_fc_mode=%u\n",
+		hw->current_fc_status,
+		hw->requested_fc_mode);
+
+	hns3_get_link_fc_info(file, dev);
+}
+
 int
 hns3_eth_dev_priv_dump(struct rte_eth_dev *dev, FILE *file)
 {
@@ -759,6 +861,7 @@ hns3_eth_dev_priv_dump(struct rte_eth_dev *dev, FILE *file)
 	hns3_get_vlan_config_info(file, hw);
 	hns3_get_fdir_basic_info(file, &hns->pf);
 	hns3_get_tm_conf_info(file, dev);
+	hns3_get_flow_ctrl_info(file, dev);
 
 	return 0;
 }
-- 
2.30.0

